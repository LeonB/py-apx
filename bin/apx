#!/usr/bin/env python

import sys
import email
import argparse
from apx.apx import AttachmentParser
from apx.apx import Logger
from cStringIO import StringIO
from email.generator import Generator
import subprocess

parser = argparse.ArgumentParser(
	description = 'Read e-mail from stdin and feed the attachments to sa-learn')
parser.add_argument('-v', '--verbose', action="count", dest='verbosity',
                  default=0, help='increase verbosity')
parser.add_argument('-q', '--quite', dest='quiet', action='store_true',
                  default=False, help='Be quiet (don\'t even report to stdout')
parser.add_argument('-l', '--log-level', dest='log_level', default='ERROR',
                   help='set (sys-)log level')
parser.add_argument('--version', action="store_true", dest='show_version',
                  default=0, help='print the version number')
parser.add_argument('-g', '--guess', dest='guess', 
                    action="store_true", help='guess if to pass the --spam, --ham or --forget argument to sa-learn')
parser.add_argument('-o', '--show-stdout', dest='show_stdout', default=False,
                    action="store_true", help='show stdout of cmd(s)')
parser.add_argument('-e', '--show-stderr', dest='show_stderr', default=False,
                    action="store_true", help='show stderr of cmd(s)')
parser.add_argument('cmd', nargs='+', 
                  help='Command to execute', metavar="CMD")

args = parser.parse_args()

Logger.instance = Logger(log_level=args.log_level, verbosity=args.verbosity,
                           quiet=args.quiet)

stdin_data = ''
if not sys.stdin.isatty(): # redirected from file or pipe
    stdin_data = "".join(sys.stdin.readlines())

if not stdin_data:
    Logger.getInstance().error('no input data')
    sys.exit(2)

mail = email.message_from_string(stdin_data)

attachments = AttachmentParser().get_attachments(mail)
Logger.getInstance().info('%i parts' % len(attachments))


for attachment in attachments:
    Logger.getInstance().info('Processing mail with subject: %s' %
                  attachment.get('Subject'))

    fp = StringIO()
    g = Generator(fp, mangle_from_=False, maxheaderlen=60)
    g.flatten(attachment)
    text = fp.getvalue()
    text = subprocess.list2cmdline(['%s' % text])
    text = fp.getvalue()

    cmd = list(args.cmd)
    for k, v in enumerate(cmd):
        try:
            cmd[k] = v % text
        except TypeError:
            pass
    #for k in range(len(cmd)):
    #    v = cmd[k]
    #    if v.find('%s') > -1:
    #        pieces = v.split('%s')
    #        cmd.pop(k)
    #
    #        pieces.reverse()
    #        for i, piece in enumerate(pieces):
    #            if (i+1)%2 == 0:
    #                cmd.insert(k, text)
    #            cmd.insert(k, piece)

    #subprocess.call(cmd)
    proc = subprocess.Popen(cmd, shell=False, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    #proc = subprocess.Popen(cmd)
    proc.wait()

    if args.show_stdout:
        print proc.stdout.read(), #with comma: don't print a newline

    if args.show_stderr:
        print proc.stderr.read(),
